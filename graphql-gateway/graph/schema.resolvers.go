package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"gpql-gateway/graph/model"
	"net/http"

	"golang.org/x/crypto/bcrypt"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	// Check if user already exists by creating a unique index on email
	payload := map[string]string{
		"name":     input.Name,
		"email":    input.Email,
		"password": input.Password,
	}

	// Marshal the payload to JSON
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}

	// Send the POST request to the user service running on localhost:8081
	resp, err := http.Post("http://localhost:8081/register", "application/json", bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("user already exists: %v", resp.Status)
	}

	// Decode the response into the User model
	var user model.User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	// Return the created user
	return &user, nil
}

// Helper function to hash the password
func hashPassword(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(bytes), nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	// Create a new Product object with a new ID
	payload := map[string]interface{}{
		"name":        input.Name,
		"description": input.Description,
		"price":       input.Price,
		"quantity":    input.Quantity,
	}
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}
	resp, err := http.Post("http://localhost:8082/product", "application/json", bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error sending request to product service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("product service responded with status: %v", resp.Status)
	}

	// Decode the response into the Product model
	var product model.Product
	if err := json.NewDecoder(resp.Body).Decode(&product); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	fmt.Print(fmt.Sprint(product))
	// Return the created product
	return &product, nil

}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	payload := map[string]interface{}{
		"product_id": input.ProductID,
		"quantity":   input.Quantity,
		"status":     input.Status,
	}
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}
	resp, err := http.Post("http://localhost:8083/order", "application/json", bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error sending request to order service: %v", err)
	}
	defer resp.Body.Close()

	var order model.Order
	if err := json.NewDecoder(resp.Body).Decode(&order); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	return &order, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User // Directly decode into a slice of users

	resp, err := http.Get("http://localhost:8081/users")
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	// Decode the response directly into a slice of users
	if err := json.NewDecoder(resp.Body).Decode(&users); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	var user model.User
	resp, err := http.Get(fmt.Sprintf("http://localhost:8081/user/%s", id))
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	err = json.NewDecoder(resp.Body).Decode(&user)
	if err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	return &user, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	var products []*model.Product
	resp, err := http.Get("http://localhost:8082/products")
	if err != nil {
		return nil, fmt.Errorf("error sending request to product service: %v", err)
	}
	defer resp.Body.Close()

	if err := json.NewDecoder(resp.Body).Decode(&products); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	var product model.Product
	resp, err := http.Get(fmt.Sprintf("http://localhost:8082/product/%s", id))
	if err != nil {
		return nil, fmt.Errorf("error sending request to product service: %v", err)
	}
	defer resp.Body.Close()

	if err := json.NewDecoder(resp.Body).Decode(&product); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	return &product, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
