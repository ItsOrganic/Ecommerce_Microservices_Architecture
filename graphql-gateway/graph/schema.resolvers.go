package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"gpql-gateway/graph/model"
	"gpql-gateway/graph/utils"
	"io"
	"log"
	"net/http"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	payload := map[string]string{
		"name":     input.Name,
		"email":    input.Email,
		"password": input.Password,
	}

	// Marshal the payload to JSON
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}

	// Send the POST request to the user service running on localhost:8081
	resp, err := http.Post("http://localhost:8081/register", "application/json", bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("user already exists: %v", resp.Status)
	}

	// Decode the response into the User model
	var user model.User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	utils.EmitEvents("User Registered")
	// Return the created user
	return &user, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	payload := map[string]interface{}{
		"name":        input.Name,
		"price":       input.Price,
		"quantity":    input.Quantity,
		"description": input.Description,
	}

	// Marshal the payload to JSON
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}

	// Send the POST request to the product service running on localhost:8082
	resp, err := http.Post("http://localhost:8082/product", "application/json", bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error sending request to product service")
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("Product with that name already exists")
	}

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %v", err)
	}
	log.Println("Response Body:", string(body))

	// Decode the response body into the Product model
	var response struct {
		Data    model.Product `json:"data"`
		Message string        `json:"message"`
	}
	if err := json.Unmarshal(body, &response); err != nil {
		return nil, fmt.Errorf("error decoding response from product service: %v", err)
	}
	utils.EmitEvents("Product Created")
	return &response.Data, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.ProductInput) (*model.Product, error) {
	payload := map[string]interface{}{
		"name":        input.Name,
		"quantity":    input.Quantity,
		"price":       input.Price,
		"description": input.Description,
	}

	// Marshal the payload to JSON
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}

	// Create a new PUT request to the product service running on localhost:8082
	req, err := http.NewRequest(http.MethodPut, fmt.Sprintf("http://localhost:8082/product/%s", id), bytes.NewBuffer(jsonPayload))
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("Received non-OK response: %v, body: %s", resp.Status, string(body))
		return nil, fmt.Errorf("received non-OK response from product service: %v", resp.Status)
	}

	// Decode the response body into the Product model
	var product model.Product
	if err := json.NewDecoder(resp.Body).Decode(&product); err != nil {
		return nil, fmt.Errorf("error decoding response from product service: %v", err)
	}

	utils.EmitEvents("Product Updated")

	// Return the updated product
	return &product, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	// Create a new DELETE request to the product service running on localhost:8082
	req, err := http.NewRequest(http.MethodDelete, fmt.Sprintf("http://localhost:8082/products/%s", id), nil)
	if err != nil {
		return false, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return false, fmt.Errorf("error sending request to product service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return false, fmt.Errorf("error deleting product: %v", resp.Status)
	}
	utils.EmitEvents("Product Deleted")
	// Return true if the product was deleted
	return true, nil
}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	productURL := fmt.Sprintf("http://localhost:8082/product/%s", input.Name)
	log.Printf("Fetching product details from URL: %s", productURL)

	productResp, err := http.Get(productURL)
	if err != nil {
		return nil, fmt.Errorf("error fetching product details: %v", err)
	}
	defer productResp.Body.Close()

	// Check the response status
	if productResp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(productResp.Body)
		return nil, fmt.Errorf("error fetching product details: %s, %s", productResp.Status, string(body))
	}

	// Decode the response into the Product model
	var product model.Product
	if err := json.NewDecoder(productResp.Body).Decode(&product); err != nil {
		return nil, fmt.Errorf("error decoding product details: %v", err)
	}

	// Create the order in the order service
	order := &model.Order{
		Name:     product.Name,
		Quantity: input.Quantity,
		Status:   input.Status,
	}

	orderJSON, err := json.Marshal(order)
	if err != nil {
		return nil, fmt.Errorf("error marshaling order: %v", err)
	}

	resp, err := http.Post("http://localhost:8083/order", "application/json", bytes.NewBuffer(orderJSON))
	if err != nil {
		return nil, fmt.Errorf("error creating order: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("error creating order: %s", string(body))
	}

	var createdOrder model.Order
	if err := json.NewDecoder(resp.Body).Decode(&createdOrder); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	utils.EmitEvents("Order Placed")

	return &createdOrder, nil
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// Send the GET request to the user service running on localhost:8081
	resp, err := http.Get("http://localhost:8081/users")
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error fetching users: %v", resp.Status)
	}

	// Decode the response into a slice of User models
	var users []*model.User
	if err := json.NewDecoder(resp.Body).Decode(&users); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	// users.ID = primitive.NewObjectID() // Removed because users is a slice of pointers to model.User
	// Return the list of users
	utils.EmitEvents("Status Updated")
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, name string) (*model.User, error) {
	// Send the GET request to the user service running on localhost:8081
	resp, err := http.Get(fmt.Sprintf("http://localhost:8081/user/%s", name))
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error fetching user: %v", resp.Status)
	}

	// Decode the response into the User model
	var user model.User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	// Return the user
	return &user, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	// Send the GET request to the product service running on localhost:8082
	resp, err := http.Get("http://localhost:8082/products")
	if err != nil {
		return nil, fmt.Errorf("error fetching products: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("Received non-OK response: %v, body: %s", resp.Status, string(body))
		return nil, fmt.Errorf("received non-OK response from product service: %v", resp.Status)
	}

	// Decode the response into a slice of Product models
	var products []*model.Product
	if err := json.NewDecoder(resp.Body).Decode(&products); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	// Return the list of products
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	// Send the GET request to the product service running on localhost:8082
	resp, err := http.Get(fmt.Sprintf("http://localhost:8082/product/%s", id))
	if err != nil {
		return nil, fmt.Errorf("error fetching product: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("Received non-OK response: %v, body: %s", resp.Status, string(body))
		return nil, fmt.Errorf("received non-OK response from product service: %v", resp.Status)
	}

	// Decode the response body into the Product model
	var product model.Product
	if err := json.NewDecoder(resp.Body).Decode(&product); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	return &product, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	// Send the GET request to the order service running on localhost:8083
	resp, err := http.Get("http://localhost:8083/orders")
	if err != nil {
		return nil, fmt.Errorf("error sending request to order service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error fetching orders: %v", resp.Status)
	}

	// Decode the response into a slice of Order models
	var orders []*model.Order

	if err := json.NewDecoder(resp.Body).Decode(&orders); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	// Return the list of orders
	return orders, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	// Send the GET request to the order service running on localhost:8083
	resp, err := http.Get(fmt.Sprintf("http://localhost:8083/order/%s", id))
	if err != nil {
		return nil, fmt.Errorf("error sending request to order service: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error fetching order: %v", resp.Status)
	}

	// Decode the response into the Order model
	var order model.Order
	if err := json.NewDecoder(resp.Body).Decode(&order); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}
	// Return the order
	return &order, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
